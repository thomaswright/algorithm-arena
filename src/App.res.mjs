// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Marked from "marked";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";

function substringBetween(s, a, b) {
  var lenA = a.length;
  var iA = s.indexOf(a);
  if (iA === -1) {
    return ;
  }
  var iB = s.indexOf(b, iA + lenA | 0);
  if (iB === -1) {
    return ;
  } else {
    return s.substring(iA + lenA | 0, iB);
  }
}

var Utils = {
  substringBetween: substringBetween
};

var escapeRE = new RegExp("\\[\\.\\*\\+\\?\\^\\$\\{\\}\\(\\)\\|\\[\\]\\\\", "g");

function $$escape(s) {
  return s.replace(escapeRE, "\\$&");
}

var usernameRE = new RegExp("(?<!\\/)(@([^\\s.,!?;:\\/)]+))", "g");

function getUsernames(s) {
  return Core__Option.map(Caml_option.nullable_to_opt(s.match(usernameRE)), (function (a) {
                return Core__Array.keepSome(a);
              }));
}

function submissionLinkRE(link) {
  return new RegExp((link + "/issues/").replace(escapeRE, "\\$&") + "(\\d+)");
}

function getSubmissionLink(s, link) {
  return Core__Option.flatMap(Core__Option.flatMap(Caml_option.nullable_to_opt(s.match(submissionLinkRE(link))), (function (a) {
                    return a[0];
                  })), (function (a) {
                return a;
              }));
}

var ghLinkRE = new RegExp("https://github.com".replace(escapeRE, "\\$&") + "[^\\s\\)]*", "g");

function getGHLinks(s) {
  return Core__Option.flatMap(Core__Option.flatMap(Caml_option.nullable_to_opt(s.match(ghLinkRE)), (function (a) {
                    return a[0];
                  })), (function (a) {
                return a;
              }));
}

function removeGHLinks(s) {
  return s.replace(ghLinkRE, "");
}

var ghImageTagsRE = new RegExp("!\\[([^\\]]+)\\]\\(" + "https://github.com".replace(escapeRE, "\\$&") + "([^\\)]+)\\)", "g");

function getGHImageTags(s) {
  return Core__Option.flatMap(Core__Option.flatMap(Caml_option.nullable_to_opt(s.match(ghImageTagsRE)), (function (a) {
                    return a[0];
                  })), (function (a) {
                return a;
              }));
}

function removeGHImageTags(s) {
  return s.replace(ghImageTagsRE, "");
}

var RegExpUtils = {
  escapeRE: escapeRE,
  $$escape: $$escape,
  usernameRE: usernameRE,
  getUsernames: getUsernames,
  submissionLinkRE: submissionLinkRE,
  getSubmissionLink: getSubmissionLink,
  ghLinkRE: ghLinkRE,
  getGHLinks: getGHLinks,
  removeGHLinks: removeGHLinks,
  ghImageTagsRE: ghImageTagsRE,
  getGHImageTags: getGHImageTags,
  removeGHImageTags: removeGHImageTags
};

function App(props) {
  var match = React.useState(function () {
        return [];
      });
  return match[0].map(function (readme) {
              var domParser = new DomParser();
              domParser.parseFromString(Marked.parse(readme.content), "text/html");
              Core__Option.getOr(substringBetween(readme.content, "### Winner", "### Prizes"), "").split("*").map(function (s) {
                    return {
                            url: readme.url,
                            challengeNumber: readme.challengeNumber,
                            usernames: getUsernames(s),
                            submissionLink: getSubmissionLink(s, readme.url),
                            commentText: s.replace(ghImageTagsRE, "").replace(ghLinkRE, ""),
                            videoLink: getGHLinks(s.replace(ghImageTagsRE, "")),
                            imgLink: Core__Option.flatMap(getGHImageTags(s), (function (a) {
                                    return getGHLinks(a);
                                  }))
                          };
                  });
            });
}

var make = App;

export {
  Utils ,
  RegExpUtils ,
  make ,
}
/* escapeRE Not a pure module */
