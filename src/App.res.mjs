// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Spice from "@greenlabs/ppx-spice/src/rescript/Spice.res.mjs";
import * as React from "react";
import * as Marked from "marked";
import * as Wouter from "wouter";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Core__Int from "@rescript/core/src/Core__Int.res.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as Core__Result from "@rescript/core/src/Core__Result.res.mjs";
import * as Belt_MapString from "rescript/lib/es6/belt_MapString.js";
import * as JsxRuntime from "react/jsx-runtime";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.res.mjs";

function repos_encode(v) {
  return Spice.arrayToJson(Spice.stringToJson, v);
}

function repos_decode(v) {
  return Spice.arrayFromJson(Spice.stringFromJson, v);
}

var Route = {};

var Link = {};

var middot = "·";

var multiplicationX = "×";

var SpecialCharacters = {
  middot: middot,
  multiplicationX: multiplicationX
};

function substringBetween(s, a, b) {
  var lenA = a.length;
  var iA = s.indexOf(a);
  if (iA === -1) {
    return ;
  }
  var iB = s.indexOf(b, iA + lenA | 0);
  if (iB === -1) {
    return ;
  } else {
    return s.substring(iA + lenA | 0, iB);
  }
}

function mapReduceWithIndex(arr, param, f) {
  return Core__Array.reduceWithIndex(arr, [
                param[0],
                param[1]
              ], (function (param, c, i) {
                  var match = f(param[0], param[1], c, i);
                  return [
                          match[0],
                          match[1]
                        ];
                }))[0];
}

var Utils = {
  substringBetween: substringBetween,
  mapReduceWithIndex: mapReduceWithIndex
};

var escapeRE = new RegExp("\\[\\.\\*\\+\\?\\^\\$\\{\\}\\(\\)\\|\\[\\]\\\\", "g");

function $$escape(s) {
  return s.replace(escapeRE, "\\$&");
}

var usernameRE = new RegExp("(?<!\\/)(@([^\\s.,!?;:\\/)]+))", "g");

function getUsernames(s) {
  return Core__Option.map(Caml_option.nullable_to_opt(s.match(usernameRE)), (function (a) {
                return Core__Array.keepSome(a).map(function (a) {
                            return a.substring(1);
                          });
              }));
}

function submissionLinkRE(link) {
  return new RegExp((link + "/issues/").replace(escapeRE, "\\$&") + "(\\d+)");
}

function getSubmissionLink(s, link) {
  return Core__Option.flatMap(Core__Option.flatMap(Caml_option.nullable_to_opt(s.match(submissionLinkRE(link))), (function (a) {
                    return a[0];
                  })), (function (a) {
                return a;
              }));
}

var ghLinkRE = new RegExp("https://github.com".replace(escapeRE, "\\$&") + "[^\\s\\)]*", "g");

function getGHLinks(s) {
  return Core__Option.map(Caml_option.nullable_to_opt(s.match(ghLinkRE)), (function (a) {
                return Core__Array.keepSome(a);
              }));
}

function removeGHLinks(s) {
  return s.replace(ghLinkRE, "");
}

var ghImageTagsRE = new RegExp("!\\[([^\\]]+)\\]\\(" + "https://github.com".replace(escapeRE, "\\$&") + "([^\\)]+)\\)", "g");

function getGHImageTags(s) {
  return Core__Option.flatMap(Core__Option.flatMap(Caml_option.nullable_to_opt(s.match(ghImageTagsRE)), (function (a) {
                    return a[0];
                  })), (function (a) {
                return a;
              }));
}

function removeGHImageTags(s) {
  return s.replace(ghImageTagsRE, "");
}

var RegExpUtils = {
  escapeRE: escapeRE,
  $$escape: $$escape,
  usernameRE: usernameRE,
  getUsernames: getUsernames,
  submissionLinkRE: submissionLinkRE,
  getSubmissionLink: getSubmissionLink,
  ghLinkRE: ghLinkRE,
  getGHLinks: getGHLinks,
  removeGHLinks: removeGHLinks,
  ghImageTagsRE: ghImageTagsRE,
  getGHImageTags: getGHImageTags,
  removeGHImageTags: removeGHImageTags
};

var routeBase = "/algorithm-arena";

var repoListGistUrl = "https://gist.githubusercontent.com/thomaswright/06e827401a84cd949997b56de8a0e345/raw/algorithm-arena-repos.json";

var medalStyles = [
  {
    backgroundColor: "oklch(0.95 0.1 95)",
    borderColor: "oklch(0.6 0.2 95)",
    color: "oklch(0.5 0.2 95)"
  },
  {
    backgroundColor: "oklch(0.95 0.05 250)",
    borderColor: "oklch(0.6  0.05 250)",
    color: "oklch(0.5  0.05 250)"
  },
  {
    backgroundColor: "oklch(0.95 0.05 75)",
    borderColor: "oklch(0.6 0.1 75)",
    color: "oklch(0.5 0.1 75)"
  },
  {
    backgroundColor: "oklch(0.95 0 75)",
    borderColor: "oklch(0.6 0 75)",
    color: "oklch(0.5 0 75)"
  }
];

var placeNames = [
  "1st",
  "2nd",
  "3rd"
];

function App$SubmissionList(props) {
  var activeChallenge = props.activeChallenge;
  var remove = props.remove;
  var set = props.set;
  return JsxRuntime.jsx("div", {
              children: props.submissions.map(function (submission, i) {
                    return JsxRuntime.jsx("div", {
                                children: JsxRuntime.jsx("span", {
                                      children: "#" + submission.challengeNumber.toString(),
                                      className: "text-inherit"
                                    }),
                                className: " w-fit text-sm font-bold cursor-pointer",
                                onClick: (function (param) {
                                    var match = submission.challengeNumber;
                                    if (activeChallenge !== undefined && activeChallenge === match) {
                                      return remove();
                                    } else {
                                      return set(submission);
                                    }
                                  })
                              }, Core__Option.getOr(submission.submissionLink, i.toString()));
                  }),
              className: "my-1 mx-1 flex flex-row gap-1 px-2 rounded items-center flex-wrap min-w-20 max-w-32",
              style: Core__Option.getOr(medalStyles[props.index], {})
            });
}

var SubmissionList = {
  make: App$SubmissionList
};

function App$Winner(props) {
  var remove = props.remove;
  var set = props.set;
  var active = props.active;
  var winner = props.winner;
  return JsxRuntime.jsxs("div", {
              children: [
                Core__Option.mapOr(placeNames[winner.rank], null, (function (p) {
                        return JsxRuntime.jsx("span", {
                                    children: p,
                                    className: "pr-1"
                                  });
                      })),
                Core__Option.mapOr(winner.usernames, null, (function (u) {
                        return JsxRuntime.jsx("span", {
                                    children: u.map(function (username) {
                                            return "@" + username;
                                          }).join(" "),
                                    className: "text-inherit"
                                  });
                      }))
              ],
              className: "border rounded-full w-fit px-3 py-1 font-bold flex flex-row flex-wrap cursor-pointer",
              style: Core__Option.getOr(medalStyles[winner.rank], {}),
              onClick: (function (param) {
                  if (active) {
                    return remove();
                  } else {
                    return set();
                  }
                })
            });
}

var Winner = {
  make: App$Winner
};

function App$CommentDetails(props) {
  var close = props.close;
  var comments = props.comments;
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx("div", {
                      children: multiplicationX,
                      className: " absolute right-2 top-0 cursor-pointer",
                      onClick: (function (param) {
                          close();
                        })
                    }),
                JsxRuntime.jsx("div", {
                      className: "pb-2",
                      dangerouslySetInnerHTML: {
                        __html: Marked.marked(comments.commentText)
                      }
                    }),
                JsxRuntime.jsxs("div", {
                      children: [
                        Core__Option.mapOr(comments.submissionLink, null, (function (v) {
                                return JsxRuntime.jsx("a", {
                                            children: "Submission",
                                            href: v
                                          });
                              })),
                        JsxRuntime.jsx("a", {
                              children: "Challenge #" + comments.challengeNumber.toString(),
                              href: comments.url
                            })
                      ],
                      className: "flex flex-row justify-between"
                    }),
                Core__Option.mapOr(comments.videoLink, null, (function (v) {
                        return JsxRuntime.jsx("div", {
                                    children: JsxRuntime.jsx("video", {
                                          className: "pt-2",
                                          autoPlay: true,
                                          src: v
                                        }),
                                    className: "max-w-xl"
                                  });
                      })),
                Core__Option.mapOr(comments.imgLink, null, (function (v) {
                        return JsxRuntime.jsx("div", {
                                    children: JsxRuntime.jsx("img", {
                                          className: "pt-2",
                                          src: v
                                        }),
                                    className: "max-w-xl"
                                  });
                      }))
              ],
              className: "p-4 pt-2 border border-slate-300 rounded-xl mt-1 max-w-xl relative"
            });
}

var CommentDetails = {
  make: App$CommentDetails
};

function App(props) {
  var match = React.useState(function () {
        
      });
  var setReadmes = match[1];
  var match$1 = React.useState(function () {
        
      });
  var setCommentsPerChallenge = match$1[1];
  var commentsPerChallenge = match$1[0];
  var match$2 = React.useState(function () {
        
      });
  var setCommentsPerUser = match$2[1];
  var commentsPerUser = match$2[0];
  React.useEffect((function () {
          Core__Option.forEach(Caml_option.null_to_opt(localStorage.getItem("path")), (function (path) {
                  localStorage.removeItem("path");
                  RescriptReactRouter.push(path);
                }));
        }), []);
  React.useEffect((function () {
          fetch(repoListGistUrl).then(function (res) {
                    return res.json();
                  }).then(function (json) {
                  return Promise.resolve(repos_decode(json));
                }).then(function (arr) {
                return Promise.resolve(Core__Result.getOr(arr, []).filter(function (name) {
                                  return name.includes("weekly-challenge");
                                }).map(function (name) {
                                var challengeNumber = Core__Option.getOr(Core__Option.flatMap(name.split("-")[2], (function (a) {
                                            return Core__Int.fromString(a, undefined);
                                          })), 0);
                                var readmeUrl = "https://raw.githubusercontent.com/Algorithm-Arena/" + name + "/main/README.md";
                                var repoUrl = "https://github.com/Algorithm-Arena/" + name;
                                return fetch(readmeUrl).then(function (res) {
                                              return res.text();
                                            }).then(function (content) {
                                            return Promise.resolve(setReadmes(function (r) {
                                                            return Belt_MapString.set(r, name, {
                                                                        name: name,
                                                                        content: content,
                                                                        url: repoUrl,
                                                                        challengeNumber: challengeNumber
                                                                      });
                                                          }));
                                          });
                              }));
              });
        }), []);
  var readmeDetails = Belt_MapString.valuesToArray(match[0]).map(function (readme) {
          var domParser = new DOMParser();
          var contentDom = domParser.parseFromString(Marked.parse(readme.content), "text/html");
          var title = contentDom.querySelector("h1");
          var challengeDescription = contentDom.querySelector("p");
          var submissionComments = Core__Option.getOr(substringBetween(readme.content, "### Winner", "### Prizes"), "").split("*").filter(function (param, i) {
                  return i > 0;
                }).map(function (s, i) {
                return {
                        url: readme.url,
                        challengeNumber: readme.challengeNumber,
                        usernames: getUsernames(s),
                        submissionLink: getSubmissionLink(s, readme.url),
                        commentText: s.replace(ghImageTagsRE, "").replace(ghLinkRE, ""),
                        videoLink: Core__Option.flatMap(getGHLinks(s.replace(ghImageTagsRE, "")), (function (a) {
                                return a[1];
                              })),
                        imgLink: Core__Option.flatMap(Core__Option.flatMap(getGHImageTags(s), (function (a) {
                                    return getGHLinks(a);
                                  })), (function (a) {
                                return a[0];
                              })),
                        rank: readme.challengeNumber === 2 ? 0 : i
                      };
              });
          return {
                  title: (title == null) ? undefined : Caml_option.some(title),
                  challengeDescription: (challengeDescription == null) ? undefined : Caml_option.some(challengeDescription),
                  submissionComments: submissionComments,
                  url: readme.url,
                  challengeNumber: readme.challengeNumber
                };
        }).toSorted(function (param, param$1) {
        return param$1.challengeNumber - param.challengeNumber | 0;
      });
  var submissionsByUser = Core__Array.reduce(readmeDetails, undefined, (function (acc, cur) {
          return Core__Array.reduce(cur.submissionComments, acc, (function (acc2, cur2) {
                        return Core__Array.reduce(Core__Option.getOr(cur2.usernames, []), acc2, (function (acc3, username) {
                                      return Belt_MapString.updateU(acc3, username, (function (v) {
                                                    return Core__Option.mapOr(v, [cur2], (function (w) {
                                                                  return Belt_Array.concatMany([
                                                                              w,
                                                                              [cur2]
                                                                            ]);
                                                                }));
                                                  }));
                                    }));
                      }));
        }));
  var leaderboard = mapReduceWithIndex(Belt_MapString.toArray(submissionsByUser).map(function (param) {
              var submissionComments = param[1];
              var score = Core__Array.reduce(submissionComments, 0, (function (totalScore, param) {
                      var rank = param.rank;
                      return totalScore + (
                              rank === 0 ? 5 : (
                                  rank === 1 ? 4 : (
                                      rank === 2 ? 3 : 1
                                    )
                                )
                            ) | 0;
                    }));
              return {
                      username: param[0],
                      submissionComments: submissionComments,
                      score: score,
                      rankListing: middot
                    };
            }).toSorted(function (param, param$1) {
            var bScore = param$1.score;
            var aScore = param.score;
            if (bScore === aScore) {
              return param.username.localeCompare(param$1.username);
            } else {
              return bScore - aScore | 0;
            }
          }), [
        [],
        [
          -1,
          0
        ]
      ], (function (m, param, cur, i) {
          var isSameScore = cur.score === param[0];
          return [
                  Belt_Array.concatMany([
                        m,
                        [{
                            username: cur.username,
                            submissionComments: cur.submissionComments,
                            score: cur.score,
                            rankListing: isSameScore ? middot : (i + 1 | 0).toString()
                          }]
                      ]),
                  [
                    cur.score,
                    isSameScore ? param[1] : i
                  ]
                ];
        }));
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx("div", {
                      className: " pt-6"
                    }),
                JsxRuntime.jsx("a", {
                      children: "Algorithm Arena",
                      className: "text-3xl px-6 pt-6 pb-3 font-black text-inherit",
                      href: "https://github.com/Algorithm-Arena"
                    }),
                JsxRuntime.jsxs("div", {
                      children: [
                        "A weekly programming challenge from ",
                        JsxRuntime.jsx("a", {
                              children: "@vjeux",
                              href: "https://github.com/vjeux"
                            })
                      ],
                      className: " px-6 pb-2 pt-3 font-medium "
                    }),
                JsxRuntime.jsxs(Wouter.Route, {
                      path: "/algorithm-arena/",
                      children: [
                        JsxRuntime.jsx("div", {
                              children: JsxRuntime.jsx(Wouter.Link, {
                                    href: routeBase + "/leaderboard",
                                    children: "Go to Leaderboard"
                                  }),
                              className: "px-6 pt-1 pb-3"
                            }),
                        JsxRuntime.jsx("div", {
                              children: readmeDetails.map(function (param) {
                                    var url = param.url;
                                    var submissionComments = param.submissionComments;
                                    var renderWinner = function (winner) {
                                      return JsxRuntime.jsx(App$Winner, {
                                                  url: url,
                                                  winner: winner,
                                                  active: Core__Option.mapOr(Belt_MapString.get(commentsPerChallenge, url), false, (function (v) {
                                                          return Caml_obj.equal(v.submissionLink, winner.submissionLink);
                                                        })),
                                                  set: (function () {
                                                      setCommentsPerChallenge(function (v) {
                                                            return Belt_MapString.set(v, url, winner);
                                                          });
                                                    }),
                                                  remove: (function () {
                                                      setCommentsPerChallenge(function (v) {
                                                            return Belt_MapString.remove(v, url);
                                                          });
                                                    })
                                                });
                                    };
                                    return JsxRuntime.jsxs("div", {
                                                children: [
                                                  JsxRuntime.jsx("div", {
                                                        children: Core__Option.mapOr(param.title, null, (function (t) {
                                                                return JsxRuntime.jsx("a", {
                                                                            className: "text-slate-800 text-2xl font-bold ",
                                                                            href: url,
                                                                            dangerouslySetInnerHTML: {
                                                                              __html: t.outerHTML
                                                                            }
                                                                          });
                                                              })),
                                                        className: "pb-2 border-b border-slate-300"
                                                      }),
                                                  Core__Option.mapOr(param.challengeDescription, null, (function (c) {
                                                          return JsxRuntime.jsx("div", {
                                                                      className: " pt-3",
                                                                      dangerouslySetInnerHTML: {
                                                                        __html: c.outerHTML
                                                                      }
                                                                    });
                                                        })),
                                                  JsxRuntime.jsxs("div", {
                                                        children: [
                                                          Core__Option.mapOr(submissionComments[0], null, renderWinner),
                                                          Core__Option.mapOr(submissionComments[1], null, renderWinner),
                                                          Core__Option.mapOr(submissionComments[2], null, renderWinner)
                                                        ],
                                                        className: "flex flex-col sm:flex-row gap-3 py-2 flex-wrap"
                                                      }),
                                                  JsxRuntime.jsx("div", {
                                                        children: Core__Option.mapOr(Belt_MapString.get(commentsPerChallenge, url), null, (function (comments) {
                                                                return JsxRuntime.jsx(App$CommentDetails, {
                                                                            comments: comments,
                                                                            close: (function () {
                                                                                setCommentsPerChallenge(function (v) {
                                                                                      return Belt_MapString.remove(v, url);
                                                                                    });
                                                                              })
                                                                          });
                                                              }))
                                                      })
                                                ],
                                                className: "pb-10 px-6"
                                              }, url);
                                  }),
                              className: "max-w-xl"
                            })
                      ]
                    }),
                JsxRuntime.jsxs(Wouter.Route, {
                      path: "/algorithm-arena/leaderboard",
                      children: [
                        JsxRuntime.jsx("div", {
                              children: JsxRuntime.jsx(Wouter.Link, {
                                    href: routeBase + "/",
                                    children: "Go to Challenges"
                                  }),
                              className: "px-6 pt-1 pb-3"
                            }),
                        JsxRuntime.jsxs("div", {
                              children: [
                                JsxRuntime.jsx("div", {
                                      children: "Leaderboard",
                                      className: "px-6 pb-2 font-bold text-2xl"
                                    }),
                                JsxRuntime.jsx("div", {
                                      children: "5 points for 1st, 4 for 2nd, 3 for 3rd, and 1 for any other submission",
                                      className: "px-6 pb-2  text-xs font-medium"
                                    }),
                                JsxRuntime.jsx("div", {
                                      children: JsxRuntime.jsxs("table", {
                                            children: [
                                              JsxRuntime.jsx("thead", {
                                                    children: JsxRuntime.jsxs("tr", {
                                                          children: [
                                                            JsxRuntime.jsx("th", {
                                                                  children: null,
                                                                  className: " text-left px-2 "
                                                                }),
                                                            JsxRuntime.jsx("th", {
                                                                  children: "User",
                                                                  className: " text-left  border-r"
                                                                }),
                                                            JsxRuntime.jsx("th", {
                                                                  children: "Score",
                                                                  className: " text-left px-2 border-r"
                                                                }),
                                                            JsxRuntime.jsx("th", {
                                                                  children: "1st Place",
                                                                  className: " text-left px-2 border-r"
                                                                }),
                                                            JsxRuntime.jsx("th", {
                                                                  children: "2nd Place",
                                                                  className: " text-left px-2 border-r"
                                                                }),
                                                            JsxRuntime.jsx("th", {
                                                                  children: "3rd Place",
                                                                  className: " text-left px-2 border-r"
                                                                }),
                                                            JsxRuntime.jsx("th", {
                                                                  children: "Other",
                                                                  className: " text-left px-2"
                                                                })
                                                          ],
                                                          className: "text-sm "
                                                        })
                                                  }),
                                              JsxRuntime.jsx("tbody", {
                                                    children: leaderboard.map(function (param) {
                                                          var score = param.score;
                                                          var username = param.username;
                                                          var match = Core__Array.reduce(param.submissionComments, [
                                                                [],
                                                                [],
                                                                [],
                                                                []
                                                              ], (function (param, cur) {
                                                                  var hm = param[3];
                                                                  var p3 = param[2];
                                                                  var p2 = param[1];
                                                                  var p1 = param[0];
                                                                  var match = cur.rank;
                                                                  switch (match) {
                                                                    case 0 :
                                                                        return [
                                                                                Belt_Array.concatMany([
                                                                                      p1,
                                                                                      [cur]
                                                                                    ]),
                                                                                p2,
                                                                                p3,
                                                                                hm
                                                                              ];
                                                                    case 1 :
                                                                        return [
                                                                                p1,
                                                                                Belt_Array.concatMany([
                                                                                      p2,
                                                                                      [cur]
                                                                                    ]),
                                                                                p3,
                                                                                hm
                                                                              ];
                                                                    case 2 :
                                                                        return [
                                                                                p1,
                                                                                p2,
                                                                                Belt_Array.concatMany([
                                                                                      p3,
                                                                                      [cur]
                                                                                    ]),
                                                                                hm
                                                                              ];
                                                                    default:
                                                                      return [
                                                                              p1,
                                                                              p2,
                                                                              p3,
                                                                              Belt_Array.concatMany([
                                                                                    hm,
                                                                                    [cur]
                                                                                  ])
                                                                            ];
                                                                  }
                                                                }));
                                                          var renderSubmissionList = function (index, submissions) {
                                                            return JsxRuntime.jsx(App$SubmissionList, {
                                                                        submissions: submissions,
                                                                        index: index,
                                                                        username: username,
                                                                        set: (function (comment) {
                                                                            setCommentsPerUser(function (v) {
                                                                                  return Belt_MapString.set(v, username, comment);
                                                                                });
                                                                          }),
                                                                        remove: (function () {
                                                                            setCommentsPerUser(function (v) {
                                                                                  return Belt_MapString.remove(v, username);
                                                                                });
                                                                          }),
                                                                        activeChallenge: Core__Option.map(Belt_MapString.get(commentsPerUser, username), (function (v) {
                                                                                return v.challengeNumber;
                                                                              }))
                                                                      });
                                                          };
                                                          if (score === 0) {
                                                            return null;
                                                          } else {
                                                            return JsxRuntime.jsxs(React.Fragment, {
                                                                        children: [
                                                                          JsxRuntime.jsxs("tr", {
                                                                                children: [
                                                                                  JsxRuntime.jsx("td", {
                                                                                        children: JsxRuntime.jsx("div", {
                                                                                              children: param.rankListing,
                                                                                              className: "font-bold text-sm pr-2 text-slate-400 text-center"
                                                                                            })
                                                                                      }),
                                                                                  JsxRuntime.jsx("td", {
                                                                                        children: JsxRuntime.jsx("div", {
                                                                                              children: JsxRuntime.jsx("a", {
                                                                                                    children: "@" + username,
                                                                                                    className: "text-inherit col-span-2 text-right ",
                                                                                                    href: "https://github.com/" + username
                                                                                                  }),
                                                                                              className: "py-1 pr-2 flex "
                                                                                            })
                                                                                      }),
                                                                                  JsxRuntime.jsx("td", {
                                                                                        children: JsxRuntime.jsx("div", {
                                                                                              children: score.toString(),
                                                                                              className: "font-bold text-sm px-2"
                                                                                            })
                                                                                      }),
                                                                                  JsxRuntime.jsx("td", {
                                                                                        children: renderSubmissionList(0, match[0])
                                                                                      }),
                                                                                  JsxRuntime.jsx("td", {
                                                                                        children: renderSubmissionList(1, match[1])
                                                                                      }),
                                                                                  JsxRuntime.jsx("td", {
                                                                                        children: renderSubmissionList(2, match[2])
                                                                                      }),
                                                                                  JsxRuntime.jsx("td", {
                                                                                        children: renderSubmissionList(3, match[3])
                                                                                      })
                                                                                ],
                                                                                className: "divide-y "
                                                                              }, username + "_submissions"),
                                                                          Core__Option.mapOr(Belt_MapString.get(commentsPerUser, username), null, (function (v) {
                                                                                  return JsxRuntime.jsxs("tr", {
                                                                                              children: [
                                                                                                JsxRuntime.jsx("td", {}),
                                                                                                JsxRuntime.jsx("td", {
                                                                                                      children: JsxRuntime.jsx(App$CommentDetails, {
                                                                                                            comments: v,
                                                                                                            close: (function () {
                                                                                                                setCommentsPerUser(function (v) {
                                                                                                                      return Belt_MapString.remove(v, username);
                                                                                                                    });
                                                                                                              })
                                                                                                          }),
                                                                                                      colSpan: 6
                                                                                                    })
                                                                                              ]
                                                                                            }, username + "_comments");
                                                                                }))
                                                                        ]
                                                                      }, username);
                                                          }
                                                        })
                                                  })
                                            ]
                                          }, "leaderboard-table"),
                                      className: "px-6 pt-1 overflow-x-scroll "
                                    })
                              ],
                              className: "pb-10"
                            })
                      ]
                    }),
                JsxRuntime.jsxs("div", {
                      children: [
                        "Website by ",
                        JsxRuntime.jsx("a", {
                              children: "Thomas Wright",
                              className: "text-blue-500 font-medium",
                              href: "https://github.com/thomaswright/algorithm-arena"
                            })
                      ],
                      className: "text-slate-500 px-6 py-4 text-xs"
                    })
              ],
              className: "bg-slate-100 text-slate-900 min-h-screen"
            });
}

var make = App;

var $$default = App;

export {
  repos_encode ,
  repos_decode ,
  Route ,
  Link ,
  SpecialCharacters ,
  Utils ,
  RegExpUtils ,
  routeBase ,
  repoListGistUrl ,
  medalStyles ,
  placeNames ,
  SubmissionList ,
  Winner ,
  CommentDetails ,
  make ,
  $$default as default,
}
/* escapeRE Not a pure module */
